---
title: Installing Boomi Data Services for PCF for PKI
owner: Partners
---

This topic describes how to install Pivotal Boomi Data Services for PKS. The installation process involves loading the Boomi Data Services container images into your container registry, and then using the helm package manager to install the Boomi Data Services Atom resource into Kubernetes. After the Boomi Data Services is resource is available you will be able to work with the Atom Cloud.

## Prerequisites

Before you install Boomi Data Services for PKS, ensure that you have installed the required software and prepared your Kubernetes environment as described in Prerequisites.
Procedure
Follow these steps to download and install the Boomi Data Services for PKS container images, and install the Boomi Data Services Atom resource.

###  Pivotal Container Services (PKS) running on Google Cloud Platform (GCP)

Follow this procedure to deploy Boomi Data Services for Kubernetes to PKS.

#### Required Software

This procedure requires that PKS on GCP is installed and running, along with all prerequisite software and configuration. See Installing PKS for Boomi Data Services for Kubernetes, Using Google Cloud Platform (GCP) for information about installing PKS.

Obtain the Kubernetes service account key (key.json) file. You will need to identify this file in your configuration to authenticate with PKS.

Before you attempt to deploy Boomi Data Services, ensure that the target cluster is available. Execute the following command to make sure that the target cluster displays in the output:

    pks list-clusters

Note: The pks login cookie typically expires after a day or two.

Note: If any problems occur during deployment, retry deploying Boomi Data Services by first removing the previous deployment.


#### Configuring kubectl and helm

Ensure that helm has sufficient privileges via a Kubernetes service account. Use a command like:

    $ kubectl create -f initialize_helm_rbac.yaml

    serviceaccount "tiller" created
    clusterrolebinding.rbac.authorization.k8s.io "tiller" created

This sets the necessary privileges for helm with a service account named tiller.

Initialize and upgrade helm with the command:

    $ helm init --wait --service-account tiller --upgrade

    $HELM_HOME has been configured at /<path>/.helm.

    Tiller (the Helm server-side component) has been upgraded to the current version.
    Happy Helming!

###  Google Kubernetes Engine (GKE) running on Google Cloud Platform (GCP)

This section describes the requirements for using Boomi Data Services for Kubernetes with Google Kubernetes Engine (GKE) deployments.

#### Cluster Requirements

When creating the GKE cluster, ensure that you make the following selections on the Create a Kubernetes cluster screen of the Google Cloud Platform console:

1. For the Cluster Version option, select the most recent version of Kubernetes.
2. Scale the Machine Type option to at least 2 vCPUs / 7.5 GB memory.
3. For the Node Image option, you must select Ubuntu. You cannot deploy Boomi Data Services with the Container-Optimized OS (cos) image.
4. Set the Size to 4 or more nodes.
5. Set Automatic node repair to Disabled (the default).
6. In the Advanced Options (click More to display Advanced Options), select Enable Kubernetes alpha features in this cluster. Also select I understand the consequences to confirm the choice.

Obtain the Kubernetes service account key (key.json) file. You will need to identify this file in your configuration to authenticate with GKE.

#### Setting the Kubernetes Context

After creating your GKE cluster, use the gcloud utility to login to GCP, and to set your current project and cluster context:

1. Log into GCP:

    ```
    $ gcloud auth login
    ```

2. Set the current project to the project where you will deploy Boomi Data Services:

    ```
    $ gcloud config set project <project-name>
    ```

3. Set the context to the Kubernetes cluster that you created for Boomi Data Services:

   1. Access GCP Console.
   2. Select **Kubernetes Engine** > **Clusters**.
   3. Click **Connect** next to the cluster that you configured for Boomi Data Services, and copy the connection command.

4. On your local client machine, paste the command to set the context to your cluster. For example:

    ```
    $ gcloud container clusters get-credentials <username> --zone us-central1-a --project <my-project>
 
    Fetching cluster endpoint and auth data.
    kubeconfig entry generated for <username>.
    ```

## Installation Instructions

1. Download the Boomi Data Services for PKS software from Pivotal Network. The download file has the name: `dell-boomi-pks-<version>.tar.gz` Go to the directory where you downloaded Boomi Data Services for PKS, and unpack the downloaded software. For example:

    ```
    $ cd ~/Downloads
    $ tar -xzf dell-boomi-pks-*.tar.gz
    $ tree <add tree output
    ```

2. Go into the new dell-boomi-pks<version> directory:

    ```
    $ cd ./dell-boomi-pks-*
    ```

3. Load the Boomi Data Services images into your local Docker registry:

    ```
    $ docker load -i ./images/*
    644879075e24: Loading layer [===========================>] 117.9MB/117.9MB
    ...
    2b9cc11f6cfc: Loading layer [===========================>] 176.6kB/176.6kB
    Loaded image: dell-boomi-pks:v0.3.0.dev.3.g6024f1e
    ```

4. Verify that both Docker images are now available:

    ```
    $ docker images “dell-boomi-*"`
    REPOSITORY           TAG                     IMAGE ID      CREATED             SIZE
    dell-boomi-molecule  v0.3.0.dev.3.g6024f1e   1d5b86baf556  30 minutes ago      763M
    ```

5. Tag the Boomi Data Services images with your private repo URI.

    ```
    $ docker tag dell-boomi-molecule harbor.registry.tld/dell-boomi-molecule
    $ docker tag dell-boomi-broker   harbor.registry.tld/dell-boomi-broker
    $ docker tag dell-boomi-dap      harbor.registry.tld/dell-boomi-dap
    ```

6. Login into your private registry

    ```
    $ docker login harbor.registry.tld
    ```

7. And push to the registry

    ```
    $ docker push harbor.registry.tld/dell-boomi-molecule
    $ docker push harbor.registry.tld/dell-boomi-broker
    $ docker push harbor.registry.tld/dell-boomi-dap
    ```

8. Now ensure your PKS cluster has access to your private registry.

    ```
    $ kubectl create secret docker-registry harbor-reg \
        --docker-server=https://harbor.registry.tld \
        --docker-username=user \
        --docker-password=12345 \
        --docker-email=your.name@your.company.com
    ```

9. For PKS or GCP deployments only

   Note: If you did not tag the images with a container registry prefix or project name (for example, if you are using your own local Minikube deployment), then you can skip this step.

   If you want to push the Boomi Data Services for Kubernetes docker images to a GCP container registry, set the project name and image repo name and then use Docker to push the images. For example, to push the images to Google Cloud Registry using the current Google Cloud project name:

    ```
    $ PROJECT=$(gcloud config list core/project --format='value(core.project)')
    $ IMAGE_REPO="gcr.io/${PROJECT}/Boomi Data Services-for-kubernetes"
 
    $ IMAGE_NAME="${IMAGE_REPO}:$(cat ./images/Boomi Data Services-for-kubernetes-tag)"
    $ docker tag $(cat ./images/Boomi Data Services-for-kubernetes-id) ${IMAGE_NAME}
    $ gcloud docker -- push ${IMAGE_NAME}
 
    $ IMAGE_NAME="${IMAGE_REPO}:$(cat ./images/Boomi Data Services-operator-tag)"
    $ docker tag $(cat ./images/Boomi Data Services-operator-id) ${IMAGE_NAME}
    $ gcloud docker -- push ${IMAGE_NAME}
    ```

10. Create the tiller service account and ensure that helm has the required Kubernetes service account privileges:

    ```
    $ kubectl create -f ./initialize_helm_rbac.yaml
    serviceaccount "tiller" created
    clusterrolebinding.rbac.authorization.k8s.io "tiller" created
    ```

    This sets the necessary privileges for helm with a service account named tiller.

11. Initialize and upgrade helm:

    ````
    $ helm init --wait --service-account tiller --upgrade`
    $HELM_HOME has been configured at /<path>/.helm.

    Tiller (the Helm server-side component) has been upgraded to the current version.
    Happy Helming!
    ```

12. Update the chart values (./chart/values.yml) and add your username, password, account ID, and environment to the chart values file.

13. Use helm to create a new Boomi Data Services release, specifying the YAML configuration file if you created one. For example, to create a new release with the name “Dell-Boomi”:

    ```
    $ helm install --name boomi -f chart/values.yml  ./chart`
    ```

    Helm installs the new release into the Kubernetes default namespace specified in the current Kubernetes context. If you want to install into a different namespace, include the --namespace option in the helm command.

    After the deployment process completes, a message appears with a link to this documentation:

    ```
    NAME:   boomi
    LAST DEPLOYED: Wed Oct 31 14:12:41 2018
    NAMESPACE: default
    STATUS: DEPLOYED

    RESOURCES:
    ==> v1/Secret
    NAME                      AGE
    boomi-dell-boomi  1s

    ==> v1/Service
    boomi-dell-boomi-broker   1s
    boomi-dell-boomi-gateway  1s

    ==> v1beta2/Deployment
    boomi-dell-boomi-broker    1s
    boomi-dell-boomi-molecule  1s

    ==> v1/Pod(related)

    NAME                                        READY  STATUS             RESTARTS  AGE
    boomi-dell-boomi-broker-6cc845c56f-mgqf8    0/1    ContainerCreating  0         1s
    boomi-dell-boomi-molecule-74bbccb5fb-c5nj4  0/2    Init:0/1           0         1s
    ```
